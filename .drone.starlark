config = {
	'app': 'phoenix',
	'rocketchat': {
		'channel': 'builds',
		'from_secret': 'private_rocketchat'
	},

	'branches': [
		'master',
		'release*',
		'develop*'
	],

	'yarnlint': True,

	'javascript': False,

	'acceptance': {
		'webUI': {
			'suites': [
				'webUIFavorites',
			],
		},
	},
}

def main(ctx):
	before = beforePipelines()

	stages = stagePipelines()
	if (stages == False):
		print('Errors detected. Review messages above.')
		return []

	dependsOn(before, stages)

	after = afterPipelines()
	dependsOn(stages, after)

	return before + stages + after

def beforePipelines():
	return yarnlint()

def stagePipelines():
	buildPipelines = build()
	jsPipelines = javascript()
	acceptancePipelines = acceptance()
	if (buildPipelines == False) or (jsPipelines == False) or (acceptancePipelines == False):
		return False

	return buildPipelines + jsPipelines + acceptancePipelines

def afterPipelines():
	return [
		notify()
	]

def yarnlint():
	pipelines = []

	if 'yarnlint' not in config:
		return pipelines

	if type(config['yarnlint']) == "bool":
		if not config['yarnlint']:
			return pipelines

	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'lint-test',
		'workspace' : {
			'base': '/var/www/owncloud',
			'path': config['app']
		},
		'steps':
			installNPM() +
			lintTest(),
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/tags/**',
				'refs/pull/**',
				'refs/pull-requests/**',
				'refs/merge-requests/**',
			]
		}
	}

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	pipelines.append(result)

	return pipelines

def build():
	pipelines = []

	if 'build' not in config:
		return pipelines

	default = {
		'phpVersions': ['7.0'],
		'commands': [
			'make dist'
		],
		'extraEnvironment': {},
		'configureTarOnTag': False,
	}

	if 'defaults' in config:
		if 'build' in config['defaults']:
			for item in config['defaults']['build']:
				default[item] = config['defaults']['build'][item]

	matrix = config['build']

	if type(matrix) == "bool":
		if matrix:
			# the config has 'build' true, so specify an empty dict that will get the defaults
			matrix = {}
		else:
			return pipelines

	params = {}
	for item in default:
		params[item] = matrix[item] if item in matrix else default[item]

	for phpVersion in params['phpVersions']:
		result = {
			'kind': 'pipeline',
			'type': 'docker',
			'name': 'build',
			'workspace' : {
				'base': '/var/www/owncloud',
				'path': 'server/apps/%s' % config['app']
			},
			'steps': [
				{
					'name': 'build',
					'image': 'owncloudci/php:%s' % phpVersion,
					'pull': 'always',
					'environment': params['extraEnvironment'],
					'commands': params['commands']
				}
			] + ([
				{
					'name': 'github_release',
					'image': 'plugins/github-release',
					'pull': 'always',
					'settings': {
						'checksum': 'sha256',
						'file_exists': 'overwrite',
						'files': 'build/dist/%s.tar.gz' % config['app'],
						'prerelease': True,
					},
					'environment': {
						'GITHUB_TOKEN': {
							'from_secret': 'github_token'
						},
					},
					'when': {
						'event': [
							'tag'
						]
					},
				}
			] if params['configureTarOnTag'] else []),
			'depends_on': [],
			'trigger': {
				'ref': [
					'refs/pull/**',
					'refs/tags/**'
				]
			}
		}

		for branch in config['branches']:
			result['trigger']['ref'].append('refs/heads/%s' % branch)

		pipelines.append(result)

	return pipelines

def javascript():
	pipelines = []

	if 'javascript' not in config:
		return pipelines

	default = {
		'coverage': False,
		'logLevel': '2',
		'extraSetup': [],
		'extraServices': [],
		'extraEnvironment': {},
		'extraCommandsBeforeTestRun': [],
	}

	if 'defaults' in config:
		if 'javascript' in config['defaults']:
			for item in config['defaults']['javascript']:
				default[item] = config['defaults']['javascript'][item]

	matrix = config['javascript']

	if type(matrix) == "bool":
		if matrix:
			# the config has 'javascript' true, so specify an empty dict that will get the defaults
			matrix = {}
		else:
			return pipelines

	params = {}
	for item in default:
		params[item] = matrix[item] if item in matrix else default[item]

	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'javascript-tests',
		'workspace' : {
			'base': '/var/www/owncloud',
			'path': 'server/apps/%s' % config['app']
		},
		'steps':
			installCore('daily-master-qa', 'sqlite', False) +
			installApp('7.0') +
			setupServerAndApp('7.0', params['logLevel']) +
			params['extraSetup'] +
		[
			{
				'name': 'js-tests',
				'image': 'owncloudci/php:7.0',
				'pull': 'always',
				'environment': params['extraEnvironment'],
				'commands': params['extraCommandsBeforeTestRun'] + [
					'make test-js'
				]
			}
		],
		'services': params['extraServices'],
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/pull/**',
				'refs/tags/**'
			]
		}
	}

	if params['coverage']:
		result['steps'].append({
			'name': 'codecov-js',
			'image': 'plugins/codecov:2',
			'pull': 'always',
			'settings': {
				'paths': [
					'coverage/*.info',
				],
				'token': {
					'from_secret': 'codecov_token'
				}
			}
		})

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	return [result]

def acceptance():
	pipelines = []

	if 'acceptance' not in config:
		return pipelines

	if type(config['acceptance']) == "bool":
		if not config['acceptance']:
			return pipelines

	errorFound = False

	default = {
		'servers': ['daily-master-qa'],
		'browsers': ['chrome'],
		'databases': ['mysql:5.5'],
		'logLevel': '2',
	}

	if 'defaults' in config:
		if 'acceptance' in config['defaults']:
			for item in config['defaults']['acceptance']:
				default[item] = config['defaults']['acceptance'][item]

	for category, matrix in config['acceptance'].items():
		if type(matrix['suites']) == "list":
			suites = {}
			for suite in matrix['suites']:
				suites[suite] = suite
		else:
			suites = matrix['suites']

		for suite, shortSuiteName in suites.items():

			params = {}
			for item in default:
				params[item] = matrix[item] if item in matrix else default[item]

			for server in params['servers']:
				for browser in params['browsers']:
					for db in params['databases']:
						browserString = '' if browser == '' else '-' + browser
						name = 'acceptance-%s%s' % (shortSuiteName, browserString)
						maxLength = 50
						nameLength = len(name)
						if nameLength > maxLength:
							print("Error: generated stage name of length", nameLength, "is not supported. The maximum length is " + str(maxLength) + ".", name)
							errorFound = True

						result = {
							'kind': 'pipeline',
							'type': 'docker',
							'name': name,
							'workspace' : {
								'base': '/var/www/owncloud',
								'path': config['app']
							},
							'steps':
								installNPM() +
								buildPhoenix() +
								installCore(server, db) +
								cloneOauth() +
								setupServerAndApp(params['logLevel']) +
								owncloudLog() +
								fixPermissions() +
								runWebuiAcceptanceTests(suite) +
								uploadScreenshots() +
								buildGithubComment(suite) +
								githubComment(),
							'services':
								phoenixService() +
								owncloudService() +
								browserService(browser) +
								databaseService(db),
							'depends_on': [],
							'trigger': {
								'ref': [
									'refs/tags/**',
									'refs/pull/**',
									'refs/pull-requests/**',
									'refs/merge-requests/**',
								]
							}
						}

						for branch in config['branches']:
							result['trigger']['ref'].append('refs/heads/%s' % branch)

						pipelines.append(result)

	if errorFound:
		return False

	return pipelines

def notify():
	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'chat-notifications',
		'clone': {
			'disable': True
		},
		'steps': [
			{
				'name': 'notify-rocketchat',
				'image': 'plugins/slack:1',
				'pull': 'always',
				'settings': {
					'webhook': {
						'from_secret': config['rocketchat']['from_secret']
					},
					'channel': config['rocketchat']['channel']
				}
			}
		],
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/tags/**'
			]
		}
	}

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	return result

def databaseService(db):
	dbName = getDbName(db)
	if (dbName == 'mariadb') or (dbName == 'mysql'):
		return [{
			'name': dbName,
			'image': db,
			'pull': 'always',
			'environment': {
				'MYSQL_USER': getDbUsername(db),
				'MYSQL_PASSWORD': getDbPassword(db),
				'MYSQL_DATABASE': getDbDatabase(db),
				'MYSQL_ROOT_PASSWORD': getDbRootPassword()
			}
		}]

	if dbName == 'postgres':
		return [{
			'name': dbName,
			'image': db,
			'pull': 'always',
			'environment': {
				'POSTGRES_USER': getDbUsername(db),
				'POSTGRES_PASSWORD': getDbPassword(db),
				'POSTGRES_DB': getDbDatabase(db)
			}
		}]

	if dbName == 'oracle':
		return [{
			'name': dbName,
			'image': 'deepdiver/docker-oracle-xe-11g:latest',
			'pull': 'always',
			'environment': {
				'ORACLE_USER': getDbUsername(db),
				'ORACLE_PASSWORD': getDbPassword(db),
				'ORACLE_DB': getDbDatabase(db),
				'ORACLE_DISABLE_ASYNCH_IO': 'true',
			}
		}]

	return []

def browserService(name):
	if name == 'chrome':
		return [{
			'name': 'selenium',
			'image': 'selenium/standalone-chrome-debug:latest',
			'pull': 'always',
		}]

	if name == 'firefox':
		return [{
			'name': 'selenium',
			'image': 'selenium/standalone-firefox-debug:latest',
			'pull': 'always',
		}]

	return []

def phoenixService():
	return [{
		'name': 'phoenix',
		'image': 'owncloudci/php',
		'pull': 'always',
		'environment': {
			'APACHE_WEBROOT': '/var/www/owncloud/phoenix/dist',
		},
		'command': [
			'mkdir dist',
			'/usr/local/bin/apachectl -e debug -D FOREGROUND',
		]
	}]

def owncloudService():
	return [{
		'name': 'owncloud',
		'image': 'owncloudci/php',
		'pull': 'always',
		'environment': {
			'APACHE_WEBROOT': '/var/www/owncloud/',
		},
		'command': [
			'/usr/local/bin/apachectl',
			'-e',
			'debug',
			'-D',
			'FOREGROUND'
		]
	}]

def getDbName(db):
	return db.split(':')[0]

def getDbUsername(db):
	name = getDbName(db)

	if name == 'oracle':
		return 'system'

	return 'owncloud'

def getDbPassword(db):
	name = getDbName(db)

	if name == 'oracle':
		return 'oracle'

	return 'owncloud'

def getDbRootPassword():
	return 'owncloud'

def getDbDatabase(db):
	name = getDbName(db)

	if name == 'oracle':
		return 'XE'

	return 'owncloud'

def installCore(version, db):
	host = getDbName(db)
	dbType = host

	username = getDbUsername(db)
	password = getDbPassword(db)
	database = getDbDatabase(db)

	if host == 'mariadb':
		dbType = 'mysql'

	if host == 'postgres':
		dbType = 'pgsql'

	if host == 'oracle':
		dbType = 'oci'

	stepDefinition = {
		'name': 'install-core',
		'image': 'owncloudci/core',
		'pull': 'always',
		'settings': {
			'version': version,
			'core_path': '/var/www/owncloud/',
			'db_type': dbType,
			'db_name': database,
			'db_host': host,
			'db_username': username,
			'db_password': password
		}
	}

	return [stepDefinition]

def installNPM():
	return [
		{
			'name': 'npm-install',
			'image': 'owncloudci/php',
			'pull': 'always',
			'commands': [
				'yarn install'
			]
		}
	]

def lintTest():
	return [
			{
				'name': 'lint-test',
				'image': 'owncloudci/php',
				'pull': 'always',
				'commands': [
					'yarn run lint'
				]
			}
	]

def buildPhoenix():
	return [
			{
				'name': 'build-phoenix',
				'image': 'owncloudci/php',
				'pull': 'always',
				'commands': [
					'yarn dist',
					'cp tests/drone/config.json dist/config.json'
				]
			}
	]

def cloneOauth():
	return [
			{
				'name': 'clone-oauth',
				'image': 'owncloud/ubuntu:18.04',
				'pull': 'always',
				'commands': [
					'git clone -b master https://github.com/owncloud/oauth2.git /var/www/owncloud/apps/oauth2'
				]
			}
	]

def installApp(phpVersion):
	if 'appInstallCommand' not in config:
		return []

	return [{
		'name': 'install-app-%s' % config['app'],
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			'cd /var/www/owncloud/server/apps/%s' % config['app'],
			config['appInstallCommand']
		]
	}]

def setupServerAndApp(logLevel):
	return [{
		'name': 'setup-server-%s' % config['app'],
		'image': 'owncloudci/php',
		'pull': 'always',
		'commands': [
			'cd /var/www/owncloud/',
			'php occ a:e testing',
			'php occ config:system:set trusted_domains 1 --value=owncloud',
			'php occ config:system:set cors.allowed-domains 0 --value=http://phoenix',
			'php occ log:manage --level %s' % logLevel,
			'php occ config:list',
			'php occ a:e oauth2',
			'php occ oauth2:add-client Phoenix Cxfj9F9ZZWQbQZps1E1M0BszMz6OOFq3lxjSuc8Uh4HLEYb9KIfyRMmgY5ibXXrU 930C6aA0U1VhM03IfNiheR2EwSzRi4hRSpcNqIhhbpeSGU6h38xssVfNcGP0sSwQ http://phoenix/oidc-callback.html',
			'php occ config:system:set skeletondirectory --value=/var/www/owncloud/apps/testing/data/webUISkeleton',
			'php occ config:system:set dav.enable.tech_preview  --type=boolean --value=true',
		]
	}]

def fixPermissions():
	return [{
		'name': 'fix-permissions',
		'image': 'owncloudci/php',
		'pull': 'always',
		'commands': [
			'cd /var/www/owncloud/',
			'chown www-data * -R'
		]
	}]

def owncloudLog():
	return [{
		'name': 'owncloud-log',
		'image': 'owncloud/ubuntu:18.04',
		'pull': 'always',
		'detach': True,
		'commands': [
			'tail -f /var/www/owncloud/data/owncloud.log'
		]
	}]

def runWebuiAcceptanceTests(suite):
	return [{
		'name': 'webui-acceptance-tests',
		'image': 'owncloudci/php',
		'pull': 'always',
		'environment': {
			'TEST_CONTEXT': suite,
			'TEST_TAGS': 'not @skip',
		},
		'commands': [
			'cd /var/www/owncloud/phoenix',
			'curl http://phoenix/oidc-callback.html',
			'yarn run acceptance-tests-drone',
		]
	}]

def uploadScreenshots():
	return [{
		'name': 'upload-screenshots',
		'image': 'plugins/s3',
		'pull': 'if-not-exists',
		'settings': {
			'acl': 'public-read',
			'bucket': 'phoenix',
			'endpoint': 'https://minio.owncloud.com/',
			'path_style': True,
			'source': '/var/www/owncloud/phoenix/tests/reports/screenshots/**/*',
			'strip_prefix': '/var/www/owncloud/phoenix/tests/reports/screenshots',
			'target': '/screenshots/${DRONE_BUILD_NUMBER}',
		},
		'environment': {
			'AWS_ACCESS_KEY_ID': {
				'from_secret': 'aws_access_key_id'
			},
			'AWS_SECRET_ACCESS_KEY': {
				'from_secret': 'aws_secret_access_key'
			},
		},
		'when': {
			'status': [
				'failure'
			]
		},
	}]

def buildGithubComment(suite):
	return [{
		'name': 'build-github-comment',
		'image': 'owncloud/ubuntu:18.04',
		'pull': 'always',
		'detach': True,
		'commands': [
			'cd /var/www/owncloud/phoenix/tests/reports/screenshots/',
			'echo \"<details><summary>:boom: Acceptance tests <strong>webUIFavorites</strong> failed. Please find the screenshots inside ...</summary>\\n\\n${DRONE_BUILD_LINK}/${DRONE_JOB_NUMBER}\\n\\n<p>\\n\\n\" >> comments.file',
			'for f in *.png; do echo \'!\'"[$f](https://minio.owncloud.com/phoenix/screenshots/${DRONE_BUILD_NUMBER}/$f)" >> comments.file; done',
			'echo "\n</p></details>" >> comments.file',
			'more comments.file',
		],
		'environment': {
			'TEST_CONTEXT': suite,
		},
		'when': {
			'status': [
				'failure'
			]
		},
	}]

def githubComment():
	return [{
		'name': 'github-comment',
		'image': 'jmccann/drone-github-comment:1',
		'pull': 'if-not-exists',
		'settings': {
			'message_file': '/var/www/owncloud/phoenix/tests/reports/screenshots/comments.file',
		},
		'environment': {
			'PLUGIN_API_KEY': {
				'from_secret': 'plugin_api_key'
			},
		},
		'when': {
			'status': [
				'failure'
			]
		},
	}]

def dependsOn(earlierStages, nextStages):
	for earlierStage in earlierStages:
		for nextStage in nextStages:
			nextStage['depends_on'].append(earlierStage['name'])
