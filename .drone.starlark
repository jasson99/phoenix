config = {
	'app': 'phoenix',
	'rocketchat': {
		'channel': 'builds',
		'from_secret': 'private_rocketchat'
	},

	'branches': [
		'master',
		'release*',
		'develop*'
	],

	'codestyle': False,

	'yarnlint': True,

	'javascript': False,

	'phpunit': False,

	'acceptance': False,
}

def main(ctx):
	before = beforePipelines()

	stages = stagePipelines()
	if (stages == False):
		print('Errors detected. Review messages above.')
		return []

	dependsOn(before, stages)

	after = afterPipelines()
	dependsOn(stages, after)

	return before + stages + after

def beforePipelines():
	return yarnlint()

def stagePipelines():
	buildPipelines = build()
	jsPipelines = javascript()
	acceptancePipelines = acceptance()
	if (buildPipelines == False) or (jsPipelines == False) or (acceptancePipelines == False):
		return False

	return buildPipelines + jsPipelines + acceptancePipelines

def afterPipelines():
	return [
		notify()
	]

def yarnlint():
	pipelines = []

	if 'yarnlint' not in config:
		return pipelines

	if type(config['yarnlint']) == "bool":
		if not config['yarnlint']:
			return pipelines

	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'lint-test',
		'workspace' : {
			'base': '/var/www/owncloud',
			'path': config['app']
		},
		'steps':
			installNPM() +
			lintTest(),
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/tags/**',
				'refs/pull/**',
				'refs/pull-requests/**',
				'refs/merge-requests/**',
			]
		}
	}

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	pipelines.append(result)

	return pipelines

def build():
	pipelines = []

	if 'build' not in config:
		return pipelines

	default = {
		'phpVersions': ['7.0'],
		'commands': [
			'make dist'
		],
		'extraEnvironment': {},
		'configureTarOnTag': False,
	}

	if 'defaults' in config:
		if 'build' in config['defaults']:
			for item in config['defaults']['build']:
				default[item] = config['defaults']['build'][item]

	matrix = config['build']

	if type(matrix) == "bool":
		if matrix:
			# the config has 'build' true, so specify an empty dict that will get the defaults
			matrix = {}
		else:
			return pipelines

	params = {}
	for item in default:
		params[item] = matrix[item] if item in matrix else default[item]

	for phpVersion in params['phpVersions']:
		result = {
			'kind': 'pipeline',
			'type': 'docker',
			'name': 'build',
			'workspace' : {
				'base': '/var/www/owncloud',
				'path': 'server/apps/%s' % config['app']
			},
			'steps': [
				{
					'name': 'build',
					'image': 'owncloudci/php:%s' % phpVersion,
					'pull': 'always',
					'environment': params['extraEnvironment'],
					'commands': params['commands']
				}
			] + ([
				{
					'name': 'github_release',
					'image': 'plugins/github-release',
					'pull': 'always',
					'settings': {
						'checksum': 'sha256',
						'file_exists': 'overwrite',
						'files': 'build/dist/%s.tar.gz' % config['app'],
						'prerelease': True,
					},
					'environment': {
						'GITHUB_TOKEN': {
							'from_secret': 'github_token'
						},
					},
					'when': {
						'event': [
							'tag'
						]
					},
				}
			] if params['configureTarOnTag'] else []),
			'depends_on': [],
			'trigger': {
				'ref': [
					'refs/pull/**',
					'refs/tags/**'
				]
			}
		}

		for branch in config['branches']:
			result['trigger']['ref'].append('refs/heads/%s' % branch)

		pipelines.append(result)

	return pipelines

def javascript():
	pipelines = []

	if 'javascript' not in config:
		return pipelines

	default = {
		'coverage': False,
		'logLevel': '2',
		'extraSetup': [],
		'extraServices': [],
		'extraEnvironment': {},
		'extraCommandsBeforeTestRun': [],
	}

	if 'defaults' in config:
		if 'javascript' in config['defaults']:
			for item in config['defaults']['javascript']:
				default[item] = config['defaults']['javascript'][item]

	matrix = config['javascript']

	if type(matrix) == "bool":
		if matrix:
			# the config has 'javascript' true, so specify an empty dict that will get the defaults
			matrix = {}
		else:
			return pipelines

	params = {}
	for item in default:
		params[item] = matrix[item] if item in matrix else default[item]

	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'javascript-tests',
		'workspace' : {
			'base': '/var/www/owncloud',
			'path': 'server/apps/%s' % config['app']
		},
		'steps':
			installCore('daily-master-qa', 'sqlite', False) +
			installApp('7.0') +
			setupServerAndApp('7.0', params['logLevel']) +
			params['extraSetup'] +
		[
			{
				'name': 'js-tests',
				'image': 'owncloudci/php:7.0',
				'pull': 'always',
				'environment': params['extraEnvironment'],
				'commands': params['extraCommandsBeforeTestRun'] + [
					'make test-js'
				]
			}
		],
		'services': params['extraServices'],
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/pull/**',
				'refs/tags/**'
			]
		}
	}

	if params['coverage']:
		result['steps'].append({
			'name': 'codecov-js',
			'image': 'plugins/codecov:2',
			'pull': 'always',
			'settings': {
				'paths': [
					'coverage/*.info',
				],
				'token': {
					'from_secret': 'codecov_token'
				}
			}
		})

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	return [result]

def acceptance():
	pipelines = []

	if 'acceptance' not in config:
		return pipelines

	if type(config['acceptance']) == "bool":
		if not config['acceptance']:
			return pipelines

	errorFound = False

	default = {
		'servers': ['daily-master-qa', 'latest'],
		'browsers': ['chrome'],
		'phpVersions': ['7.0'],
		'databases': ['mariadb:10.2'],
		'federatedServerNeeded': False,
		'filterTags': '',
		'logLevel': '2',
		'emailNeeded': False,
		'extraSetup': [],
		'extraServices': [],
		'extraEnvironment': {},
		'extraCommandsBeforeTestRun': [],
		'extraApps': [],
		'useBundledApp': False,
		'includeKeyInMatrixName': False,
	}

	if 'defaults' in config:
		if 'acceptance' in config['defaults']:
			for item in config['defaults']['acceptance']:
				default[item] = config['defaults']['acceptance'][item]

	for category, matrix in config['acceptance'].items():
		if type(matrix['suites']) == "list":
			suites = {}
			for suite in matrix['suites']:
				suites[suite] = suite
		else:
			suites = matrix['suites']

		for suite, shortSuiteName in suites.items():
			isWebUI = suite.startswith('webUI')
			isAPI = suite.startswith('api')
			isCLI = suite.startswith('cli')

			params = {}
			for item in default:
				params[item] = matrix[item] if item in matrix else default[item]

			if isAPI or isCLI:
				params['browsers'] = ['']

			for server in params['servers']:
				for browser in params['browsers']:
					for phpVersion in params['phpVersions']:
						for db in params['databases']:
							name = 'unknown'

							if isWebUI or isAPI or isCLI:
								browserString = '' if browser == '' else '-' + browser
								keyString = '-' + category if params['includeKeyInMatrixName'] else ''
								name = '%s%s-%s%s-%s-php%s' % (shortSuiteName, keyString, server.replace('daily-', '').replace('-qa', ''), browserString, db.replace(':', ''), phpVersion)
								maxLength = 50
								nameLength = len(name)
								if nameLength > maxLength:
									print("Error: generated stage name of length", nameLength, "is not supported. The maximum length is " + str(maxLength) + ".", name)
									errorFound = True

							environment = {}
							for env in params['extraEnvironment']:
								environment[env] = params['extraEnvironment'][env]

							environment['TEST_SERVER_URL'] = 'http://server'
							environment['BEHAT_FILTER_TAGS'] = params['filterTags']
							environment['BEHAT_SUITE'] = suite

							if isWebUI:
								environment['SELENIUM_HOST'] = 'selenium'
								environment['SELENIUM_PORT'] = '4444'
								environment['BROWSER'] = browser
								environment['PLATFORM'] = 'Linux'
								makeParameter = 'test-acceptance-webui'

							if isAPI:
								makeParameter = 'test-acceptance-api'

							if isCLI:
								makeParameter = 'test-acceptance-cli'

							if params['emailNeeded']:
								environment['MAILHOG_HOST'] = 'email'

							result = {
								'kind': 'pipeline',
								'type': 'docker',
								'name': name,
								'workspace' : {
									'base': '/var/www/owncloud',
									'path': 'testrunner/apps/%s' % config['app']
								},
								'steps':
									installNPM() +
									installCore(server, db, params['useBundledApp']) +
									installTestrunner(phpVersion, params['useBundledApp']) +
								([
									{
										'name': 'install-federation',
										'image': 'owncloudci/core',
										'pull': 'always',
										'settings': {
											'version': server,
											'core_path': '/var/www/owncloud/federated'
										}
									},
									{
										'name': 'configure-federation',
										'image': 'owncloudci/php:%s' % phpVersion,
										'pull': 'always',
										'commands': [
											'echo "export TEST_SERVER_FED_URL=http://federated" > /var/www/owncloud/saved-settings.sh',
											'cd /var/www/owncloud/federated',
											'php occ a:l',
											'php occ a:e testing',
											'php occ a:l',
											'php occ config:system:set trusted_domains 1 --value=federated',
											'php occ log:manage --level %s' % params['logLevel'],
											'php occ config:list'
										]
									}
								] + owncloudLog('federated') if params['federatedServerNeeded'] else []) +
									installApp(phpVersion) +
									installExtraApps(phpVersion, params['extraApps']) +
									setupServerAndApp(phpVersion, params['logLevel']) +
									owncloudLog('server') +
									params['extraSetup'] +
									fixPermissions(phpVersion, params['federatedServerNeeded']) +
								[
									({
										'name': 'acceptance-tests',
										'image': 'owncloudci/php:%s' % phpVersion,
										'pull': 'always',
										'environment': environment,
										'commands': params['extraCommandsBeforeTestRun'] + [
											'touch /var/www/owncloud/saved-settings.sh',
											'. /var/www/owncloud/saved-settings.sh',
											'make %s' % makeParameter
										]
									}),
								],
								'services': databaseService(db)
									+ browserService(browser)
									+ emailService(params['emailNeeded'])
									+ params['extraServices']
									+ owncloudService(server, phpVersion, 'server', '/var/www/owncloud/server', False)
									+ (owncloudService(server, phpVersion, 'federated', '/var/www/owncloud/federated', False) if params['federatedServerNeeded'] else []),
								'depends_on': [],
								'trigger': {
									'ref': [
										'refs/pull/**',
										'refs/tags/**'
									]
								}
							}

							for branch in config['branches']:
								result['trigger']['ref'].append('refs/heads/%s' % branch)

							pipelines.append(result)

	if errorFound:
		return False

	return pipelines

def notify():
	result = {
		'kind': 'pipeline',
		'type': 'docker',
		'name': 'chat-notifications',
		'clone': {
			'disable': True
		},
		'steps': [
			{
				'name': 'notify-rocketchat',
				'image': 'plugins/slack:1',
				'pull': 'always',
				'settings': {
					'webhook': {
						'from_secret': config['rocketchat']['from_secret']
					},
					'channel': config['rocketchat']['channel']
				}
			}
		],
		'depends_on': [],
		'trigger': {
			'ref': [
				'refs/tags/**'
			]
		}
	}

	for branch in config['branches']:
		result['trigger']['ref'].append('refs/heads/%s' % branch)

	return result

def databaseService(db):
	dbName = getDbName(db)
	if (dbName == 'mariadb') or (dbName == 'mysql'):
		return [{
			'name': dbName,
			'image': db,
			'pull': 'always',
			'environment': {
				'MYSQL_USER': getDbUsername(db),
				'MYSQL_PASSWORD': getDbPassword(db),
				'MYSQL_DATABASE': getDbDatabase(db),
				'MYSQL_ROOT_PASSWORD': getDbRootPassword()
			}
		}]

	if dbName == 'postgres':
		return [{
			'name': dbName,
			'image': db,
			'pull': 'always',
			'environment': {
				'POSTGRES_USER': getDbUsername(db),
				'POSTGRES_PASSWORD': getDbPassword(db),
				'POSTGRES_DB': getDbDatabase(db)
			}
		}]

	if dbName == 'oracle':
		return [{
			'name': dbName,
			'image': 'deepdiver/docker-oracle-xe-11g:latest',
			'pull': 'always',
			'environment': {
				'ORACLE_USER': getDbUsername(db),
				'ORACLE_PASSWORD': getDbPassword(db),
				'ORACLE_DB': getDbDatabase(db),
				'ORACLE_DISABLE_ASYNCH_IO': 'true',
			}
		}]

	return []

def browserService(name):
	if name == 'chrome':
		return [{
			'name': 'selenium',
			'image': 'selenium/standalone-chrome-debug:3.141.59-oxygen',
			'pull': 'always',
			'environment': {
				'JAVA_OPTS': '-Dselenium.LOGGER.level=WARNING'
			}
		}]

	if name == 'firefox':
		return [{
			'name': 'selenium',
			'image': 'selenium/standalone-firefox-debug:3.8.1',
			'pull': 'always',
			'environment': {
				'JAVA_OPTS': '-Dselenium.LOGGER.level=WARNING',
				'SE_OPTS': '-enablePassThrough false'
			}
		}]

	return []

def emailService(emailNeeded):
	if emailNeeded:
		return [{
			'name': 'email',
			'image': 'mailhog/mailhog',
			'pull': 'always',
		}]

	return []

def owncloudService(version, phpVersion, name = 'server', path = '/var/www/owncloud/server', ssl = True):
	if ssl:
		environment = {
			'APACHE_WEBROOT': path,
			'APACHE_CONFIG_TEMPLATE': 'ssl',
			'APACHE_SSL_CERT_CN': 'server',
			'APACHE_SSL_CERT': '/var/www/owncloud/%s.crt' % name,
			'APACHE_SSL_KEY': '/var/www/owncloud/%s.key' % name
		}
	else:
		environment = {
			'APACHE_WEBROOT': path
		}

	return [{
		'name': name,
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'environment': environment,
		'command': [
			'/usr/local/bin/apachectl',
			'-e',
			'debug',
			'-D',
			'FOREGROUND'
		]
	}]

def getDbName(db):
	return db.split(':')[0]

def getDbUsername(db):
	name = getDbName(db)

	if name == 'oracle':
		return 'system'

	return 'owncloud'

def getDbPassword(db):
	name = getDbName(db)

	if name == 'oracle':
		return 'oracle'

	return 'owncloud'

def getDbRootPassword():
	return 'owncloud'

def getDbDatabase(db):
	name = getDbName(db)

	if name == 'oracle':
		return 'XE'

	return 'owncloud'

def installCore(version, db, useBundledApp):
	host = getDbName(db)
	dbType = host

	username = getDbUsername(db)
	password = getDbPassword(db)
	database = getDbDatabase(db)

	if host == 'mariadb':
		dbType = 'mysql'

	if host == 'postgres':
		dbType = 'pgsql'

	if host == 'oracle':
		dbType = 'oci'

	stepDefinition = {
		'name': 'install-core',
		'image': 'owncloudci/core',
		'pull': 'always',
		'settings': {
			'version': version,
			'core_path': '/var/www/owncloud/server',
			'db_type': dbType,
			'db_name': database,
			'db_host': host,
			'db_username': username,
			'db_password': password
		}
	}

	if not useBundledApp:
		stepDefinition['settings']['exclude'] = 'apps/%s' % config['app']

	return [stepDefinition]

def installNPM():
	return [
		{
			'name': 'npm-install',
			'image': 'owncloudci/php',
			'pull': 'always',
			'commands': [
				'yarn install'
			]
		}
	]

def lintTest():
	return [
			{
				'name': 'lint-test',
				'image': 'owncloudci/php',
				'pull': 'always',
				'commands': [
					'yarn run lint'
				]
			}
	]

def installTestrunner(phpVersion, useBundledApp):
	return [{
		'name': 'install-testrunner',
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			'mkdir /tmp/testrunner',
			'git clone -b master --depth=1 https://github.com/owncloud/core.git /tmp/testrunner',
			'rsync -aIX /tmp/testrunner /var/www/owncloud',
		] + ([
			'cp -r /var/www/owncloud/testrunner/apps/%s /var/www/owncloud/server/apps/' % config['app']
		] if not useBundledApp else []) + [
			'cd /var/www/owncloud/testrunner',
			'make install-composer-deps vendor-bin-deps'
		]
	}]

def installExtraApps(phpVersion, extraApps):
	if type(extraApps) == "list":
		if extraApps == []:
			return []
		apps = {}
		for app in extraApps:
			apps[app] = ''
	else:
		apps = {}
		for app, command in extraApps.items():
			apps[app] = command

	commandArray = []
	for app, command in apps.items():
		commandArray.append('git clone https://github.com/owncloud/%s.git /var/www/owncloud/testrunner/apps/%s' % (app, app))
		commandArray.append('cp -r /var/www/owncloud/testrunner/apps/%s /var/www/owncloud/server/apps/' % app)
		if (command != ''):
			commandArray.append('cd /var/www/owncloud/server/apps/%s' % app)
			commandArray.append(command)
		commandArray.append('cd /var/www/owncloud/server')
		commandArray.append('php occ a:l')
		commandArray.append('php occ a:e %s' % app)
		commandArray.append('php occ a:l')

	return [{
		'name': 'install-extra-apps',
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': commandArray
	}]

def installApp(phpVersion):
	if 'appInstallCommand' not in config:
		return []

	return [{
		'name': 'install-app-%s' % config['app'],
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			'cd /var/www/owncloud/server/apps/%s' % config['app'],
			config['appInstallCommand']
		]
	}]

def setupServerAndApp(phpVersion, logLevel):
	return [{
		'name': 'setup-server-%s' % config['app'],
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			'cd /var/www/owncloud/server',
			'php occ a:l',
			'php occ a:e %s' % config['app'],
			'php occ a:e testing',
			'php occ a:l',
			'php occ config:system:set trusted_domains 1 --value=server',
			'php occ log:manage --level %s' % logLevel,
		]
	}]

def fixPermissions(phpVersion, federatedServerNeeded):
	return [{
		'name': 'fix-permissions',
		'image': 'owncloudci/php:%s' % phpVersion,
		'pull': 'always',
		'commands': [
			'chown -R www-data /var/www/owncloud/server'
		] + ([
			'chown -R www-data /var/www/owncloud/federated'
		] if federatedServerNeeded else [])
	}]

def owncloudLog(server):
	return [{
		'name': 'owncloud-log-%s' % server,
		'image': 'owncloud/ubuntu:18.04',
		'pull': 'always',
		'detach': True,
		'commands': [
			'tail -f /var/www/owncloud/%s/data/owncloud.log' % server
		]
	}]

def dependsOn(earlierStages, nextStages):
	for earlierStage in earlierStages:
		for nextStage in nextStages:
			nextStage['depends_on'].append(earlierStage['name'])
